https://nextjs.org/learn/basics/create-nextjs-app/setup

https://github.com/Annie-Huang/nextjs-blog

https://nextjs.org/docs/basic-features/built-in-css-support#sass-support
https://nextjs.org/docs/api-reference/next/head
https://nextjs.org/docs/advanced-features/custom-document
https://github.com/vercel/styled-jsx
https://next-learn-starter.vercel.app/

Up to
https://nextjs.org/learn/basics/deploying-nextjs-app
------------------------------------------------------------------------------------

C:\react>npx create-next-app nextjs-blog --use-npm --example "https://github.com/vercel/next-learn-starter/tree/master/learn-starter"
C:\react\nextjs-blog>npm install classnames --save
C:\react\nextjs-blog>npm install tailwindcss postcss-preset-env postcss-flexbugs-fixes
C:\react\nextjs-blog>npm install sass
C:\react\nextjs-blog>npm install gray-matter
C:\react\nextjs-blog>npm install remark remark-html
C:\react\nextjs-blog>npm install date-fns

http://localhost:3000
http://localhost:3000/posts/first-post
http://localhost:3000/posts/ssg-ssr
http://localhost:3000/posts/pre-rendering
http://localhost:3000/api/hello

pages/index.js is associated with the / route.
pages/posts/first-post.js is associated with the /posts/first-post route.


Advantage of using Next.js
- Next.js does code splitting automatically, so each page only loads what’s necessary for that page.
  This ensures that the homepage loads quickly even if you have hundreds of pages.
- In a production build of Next.js, whenever Link components appear in the browser’s viewport, Next.js automatically
  prefetches the code for the linked page in the background. By the time you click the link, the code for the destination
  page will already be loaded in the background, and the page transition will be near-instant!


If you need to add attributes like, for example, className, add it to the a tag, not to the Link tag.
    <Link href="/">
      <a className="foo" target="_blank" rel="noopener noreferrer">
        Hello World
      </a>
    </Link>


Next.js provides an Image component out of the box:
- Ensuring your image is responsive on different screen sizes
- Optimizing your images with a third-party tool or library. This allows for resizing, optimizing, and serving images
  in modern formats like WebP when the browser supports it. This avoids shipping large images to devices with a smaller viewport.
  It also allows Next.js to automatically adopt future image formats and serve them to browsers that support those formats.
- Only loading images when they enter the viewport
    <Image
      src='/images/profile.jpg' // Route of the image file
      height={144} // Desired size with correct aspect ratio
      width={144} // Desired size with correct aspect ratio
      alt='Your Name'
    />


<Head> is a React Component that is built into Next.js. It allows you to modify the <head> of a page.
- meta tags (like og:image), which are used to describe a page's content
    <meta
      property='og:image'
      content={`https://og-image.vercel.app/${encodeURI(
        siteTitle
      )}.png?theme=light&md=0&fontSize=75px&images=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg`}
    />

In Next.js, you can add global CSS files by importing them from pages/_app.js. You cannot import global CSS anywhere else.

Out of the box, with no configuration, Next.js compiles CSS using PostCSS.

=====================================

Pre-rendering:
---------------------
Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser,
its JavaScript code runs and makes the page fully interactive. (This process is called hydration.)

Static Generation
---------------------
- is the pre-rendering method that generates the HTML at build time. The pre-rendered HTML is then reused on each request.
- We recommend using Static Generation (with and without data) whenever possible because your page can be built once and served by CDN,
  which makes it much faster than having a server render the page on every request.
- You can use Static Generation for many types of pages, including:
  o Marketing pages
  o Blog posts
  o E-commerce product listings
  o Help and documentation

- getStaticProps runs at build time in production, and… Inside the function, you can fetch external data and send it as props to the page.
- !!!!  getStaticProps only runs on the server-side. It will never run on the client-side. It won’t even be included in the JS bundle for the browser.
        That means you can write code such as direct database queries without them being sent to browsers.
- Because it’s meant to be run at build time, you won’t be able to use data that’s only available during request time, such as query parameters or HTTP headers.
- Only Allowed in a Page. getStaticProps can only be exported from a page. You can’t export it from non-page files.



Server-side Rendering
---------------------
- is the pre-rendering method that generates the HTML on each request.
- Maybe your page shows frequently updated data, and the page content changes on every request. In that case, you can use Server-side Rendering.
- It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate frequently updated data.
- export async function getServerSideProps(context) {
    return {
      props: {
        // props for your component
      }
    }
  }
- You should use getServerSideProps only if you need to pre-render a page whose data must be fetched at request time.
- Time to first byte (TTFB) will be slower than getStaticProps because the server must compute the result on every request,
  and the result cannot be cached by a CDN without extra configuration.


Client-side Rendering
-------------------------
- Statically generate (pre-render) parts of the page that do not require external data.
  When the page loads, fetch external data from the client using JavaScript and populate the remaining parts.
- !!!! This approach works well for user dashboard pages, for example. Because a dashboard is a private, user-specific page,
       SEO is not relevant, and the page doesn't need to be pre-rendered. The data is frequently updated, which requires request-time data fetching.
- SWR. The team behind Next.js has created a React hook for data fetching called SWR. We highly recommend it if you’re fetching data on the client side.
  It handles caching, revalidation, focus tracking, refetching on interval, and more.
```
    // (https://swr.vercel.app/)
    import useSWR from 'swr'

    function Profile() {
      const { data, error } = useSWR('/api/user', fetch)

      if (error) return <div>failed to load</div>
      if (!data) return <div>loading...</div>
      return <div>hello {data.name}!</div>
    }
```

Page Path Depends on External Data (statically generate pages with dynamic routes)
---------------------------------------------------------------------------------------------
- Next.js allows you to statically generate pages with paths that depend on external data.
- We want each post to have the path /posts/<id>, where <id> is the name of the markdown file under the top-level posts directory.
- First, we’ll create a page called [id].js under pages/posts. Pages that begin with [ and end with ] are dynamic routes in Next.js.
- getStaticPaths
  Now, here’s what’s new: We’ll export an async function called getStaticPaths from this page. In this function, we need to return a list of possible values for id.
- Finally, we need to implement getStaticProps again - this time, to fetch necessary data for the blog post with a given id.
  getStaticProps is given params, which contains id (because the file name is [id].js).
```
    import Layout from '../../components/layout'

    export default function Post() {
      return <Layout>...</Layout>
    }

    export async function getStaticPaths() {
      // Return a list of possible value for id
    }

    export async function getStaticProps({ params }) {
      // Fetch necessary data for the blog post using params.id
    }
```
- paths contains the array of known paths returned by getAllPostIds(), which include the params defined by pages/posts/[id].js.
- In development (npm run dev or yarn dev), getStaticPaths runs on every request. In production, getStaticPaths runs at build time.

- If fallback is false, then any paths not returned by getStaticPaths will result in a 404 page.
- If fallback is true, The paths that have not been generated at build time will not result in a 404 page.
  Instead, Next.js will serve a “fallback” version of the page on the first request to such a path.
- If fallback is blocking, then new paths will be server-side rendered with getStaticProps, and cached for future requests so it only happens once per path.

- Dynamic routes can be extended to catch all paths by adding three dots (...) inside the brackets. For example:
  pages/posts/[...id].js matches /posts/a, but also /posts/a/b, /posts/a/b/c and so on.
- If you do this, in getStaticPaths, you must return an array as the value of the id key like so:
```
    return [
      {
        params: {
          // Statically Generates /posts/a/b/c
          id: ['a', 'b', 'c']
        }
      }
      //...
    ]
```
- And params.id will be an array in getStaticProps:
```
    export async function getStaticProps({ params }) {
        // params.id will be like ['a', 'b', 'c']
      }
```

- If you want to access the Next.js router, you can do so by importing the useRouter hook from next/router.
- To create a custom 404 page, create pages/404.js. This file is statically generated at build time.
```
    // pages/404.js
    export default function Custom404() {
      return <h1>404 - Page Not Found</h1>
    }
```


Creating API Routes
------------------------------------
- req is an instance of http.IncomingMessage,
- res is an instance of http.ServerResponse,
- You should not fetch an API Route from getStaticProps or getStaticPaths. Instead, write your server-side code directly in
  getStaticProps or getStaticPaths (or call a helper function).
- getStaticProps and getStaticPaths runs only on the server-side. It will never be run on the client-side.
  It won’t even be included in the JS bundle for the browser. That means you can write code such as direct database queries without them being sent to browsers.
- A good use case for API Routes is handling form input. For example, you can create a form on your page and
  have it send a POST request to your API Route. You can then write code to directly save it to your database.
```
    export default function handler(req, res) {
      const email = req.body.email
      // Then save email to your database, etc...
    }
```


