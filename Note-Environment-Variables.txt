https://nextjs.org/docs/basic-features/environment-variables

###########################################################################

Loading Environment Variables:
-----------------------------------
Next.js has built-in support for loading environment variables from .env.local into process.env.

        An example .env.local:

        DB_HOST=localhost
        DB_USER=myuser
        DB_PASS=mypassword

This loads process.env.DB_HOST, process.env.DB_USER, and process.env.DB_PASS into the Node.js environment automatically allowing you to use them in Next.js data fetching methods and API routes.

        // pages/index.js
        export async function getStaticProps() {
          const db = await myDB.connect({
            host: process.env.DB_HOST,
            username: process.env.DB_USER,
            password: process.env.DB_PASS,
          })
          // ...
        }

In order to keep server-only secrets safe, Next.js replaces process.env.* with the correct values at build time. This means that process.env is not a standard JavaScript object, so youâ€™re not able to use object destructuring. Environment variables must be referenced as e.g. process.env.NEXT_PUBLIC_PUBLISHABLE_KEY, not const { NEXT_PUBLIC_PUBLISHABLE_KEY } = process.env.


Exposing Environment Variables to the Browser
-----------------------------------------------------
By default all environment variables loaded through .env.local are only available in the Node.js environment, meaning they won't be exposed to the browser.
In order to expose a variable to the browser you have to prefix the variable with NEXT_PUBLIC_. For example:

        NEXT_PUBLIC_ANALYTICS_ID=abcdefghijk

The value will be inlined into JavaScript sent to the browser because of the NEXT_PUBLIC_ prefix. This inlining occurs at build time, so your various NEXT_PUBLIC_ envs need to be set when the project is built.

        // pages/index.js
        import setupAnalyticsService from '../lib/my-analytics-service'

        // NEXT_PUBLIC_ANALYTICS_ID can be used here as it's prefixed by NEXT_PUBLIC_
        setupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)

        function HomePage() {
          return <h1>Hello World</h1>
        }

        export default HomePage


Default Environment Variables
----------------------------------------
!!!!!
In general only one .env.local file is needed. However, sometimes you might want to add some defaults for the development (next dev) or production (next start) environment.
Next.js allows you to set defaults in .env (all environments), .env.development (development environment), and .env.production (production environment).
.env.local always overrides the defaults set.
.env*.local should be added to .gitignore, as those files are intended to be ignored. .env.local is where secrets can be stored.

Test Environment Variables
------------------------------------
There is a small difference between test environment, and both development and production that you need to bear in mind: .env.local won't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use same env defaults across different executions by ignoring your .env.local (which is intended to override the default set).

While running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging the loadEnvConfig function from the @next/env package.

        // The below can be used in a Jest global setup file or similar for your testing set-up
        import { loadEnvConfig } from '@next/env'

        export default async () => {
          const projectDir = process.cwd()
          loadEnvConfig(projectDir)
        }



