https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation
https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation
https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering

https://next-code-elimination.vercel.app/
https://nextjs.org/docs/basic-features/data-fetching

###############################################################################################################


1.Your page CONTENT depends on external data: Use getStaticProps:
==============================================================================

        function Blog({ posts }) {
          // Render posts...
        }

        // This function gets called at build time
        export async function getStaticProps() {
          // Call an external API endpoint to get posts
          const res = await fetch('https://.../posts')
          const posts = await res.json()

          // By returning { props: { posts } }, the Blog component
          // will receive `posts` as a prop at build time
          return {
            props: {
              posts,
            },
          }
        }

        export default Blog

        ----------------------------

The context parameter is an object containing the following keys:
- params contains the route parameters for pages using dynamic routes. For example, if the page name is [id].js , then params will look like { id: ... }. To learn more, take a look at the Dynamic Routing documentation. You should use this together with getStaticPaths, which we’ll explain later.
- preview is true if the page is in the preview mode and undefined otherwise. See the Preview Mode documentation.
- previewData contains the preview data set by setPreviewData. See the Preview Mode documentation.
- locale contains the active locale (if enabled).
- locales contains all supported locales (if enabled).
- defaultLocale contains the configured default locale (if enabled).

getStaticProps should return an object with:
- props - An optional object with the props that will be received by the page component. It should be a serializable object
- revalidate - An optional amount in seconds after which a page re-generation can occur (defaults to: false or no revalidating). More on Incremental Static Regeneration
- notFound - An optional boolean value to allow the page to return a 404 status and page. Below is an example of how it works:
        export async function getStaticProps(context) {
          const res = await fetch(`https://.../data`)
          const data = await res.json()

          if (!data) {
            return {
              notFound: true,
            }
          }

          return {
            props: { data }, // will be passed to the page component as props
          }
        }
- redirect - An optional redirect value to allow redirecting to internal and external resources. It should match the shape of { destination: string, permanent: boolean }. In some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use the statusCode property instead of the permanent property, but not both. Below is an example of how it works:
        export async function getStaticProps(context) {
          const res = await fetch(`https://...`)
          const data = await res.json()

          if (!data) {
            return {
              redirect: {
                destination: '/',
                permanent: false,
              },
            }
          }

          return {
            props: { data }, // will be passed to the page component as props
          }
        }

        ----------------------------



2. Your page PATHS depend on external data: Use getStaticPaths (usually in addition to getStaticProps).
=====================================================================================================================

        function Post({ post }) {
          // Render post...
        }

        // This function gets called at build time
        export async function getStaticPaths() {
          // Call an external API endpoint to get posts
          const res = await fetch('https://.../posts')
          const posts = await res.json()

          // Get the paths we want to pre-render based on posts
          const paths = posts.map((post) => ({
            params: { id: post.id },
          }))

          // We'll pre-render only these paths at build time.
          // { fallback: false } means other routes should 404.
          return { paths, fallback: false }
        }

        // This also gets called at build time
        export async function getStaticProps({ params }) {
          // params contains the post `id`.
          // If the route is like /posts/1, then params.id is 1
          const res = await fetch(`https://.../posts/${params.id}`)
          const post = await res.json()

          // Pass post data to the page via props
          return { props: { post } }
        }

        export default Post

        ----------------------------

Incremental Static Regeneration:
Incremental Static Regeneration (ISR) enables you to use static-generation on a per-page basis, without needing to rebuild the entire site. With ISR, you can retain the benefits of static while scaling to millions of pages.
- Any requests to the page after the initial request and before 10 seconds are also cached and instantaneous.
- After the 10-second window, the next request will still show the cached (stale) page
- Next.js triggers a regeneration of the page in the background.
- Once the page has been successfully generated, Next.js will invalidate the cache and show the updated product page. If the background regeneration fails, the old page remains unaltered.

        function Blog({ posts }) {
          return (
            <ul>
              {posts.map((post) => (
                <li>{post.title}</li>
              ))}
            </ul>
          )
        }

        // This function gets called at build time on server-side.
        // It may be called again, on a serverless function, if
        // revalidation is enabled and a new request comes in
        export async function getStaticProps() {
          const res = await fetch('https://.../posts')
          const posts = await res.json()

          return {
            props: {
              posts,
            },
            // Next.js will attempt to re-generate the page:
            // - When a request comes in
            // - At most once every 10 seconds
            revalidate: 10, // In seconds
          }
        }

        // This function gets called at build time on server-side.
        // It may be called again, on a serverless function, if
        // the path has not been generated.
        export async function getStaticPaths() {
          const res = await fetch('https://.../posts')
          const posts = await res.json()

          // Get the paths we want to pre-render based on posts
          const paths = posts.map((post) => ({
            params: { id: post.id },
          }))

          // We'll pre-render only these paths at build time.
          // { fallback: blocking } will server-render pages
          // on-demand if the path doesn't exist.
          return { paths, fallback: 'blocking' }
        }

        export default Blog

        ----------------------------

The paths key (required)
For example, suppose that you have a page that uses dynamic routes named pages/posts/[id].js. If you export getStaticPaths from this page and return the following for paths
Then Next.js will statically generate posts/1 and posts/2 at build time using the page component in pages/posts/[id].js.
        return {
          paths: [
            { params: { id: '1' } },
            { params: { id: '2' } }
          ],
          fallback: ...
        }
If the page name is pages/posts/[postId]/[commentId], then params should contain postId and commentId.
If the page name uses catch-all routes, for example pages/[...slug], then params should contain slug which is an array. For example, if this array is ['foo', 'bar'], then Next.js will statically generate the page at /foo/bar.
If the page uses an optional catch-all route, supply null, [], undefined or false to render the root-most route. For example, if you supply slug: false for pages/[[...slug]], Next.js will statically generate the page /.

        ----------------------------

The fallback key (required)
fallback: false
- If fallback is false, then any paths not returned by getStaticPaths will result in a 404 page. You can do this if you have a small number of paths to pre-render - so they are all statically generated during build time. It’s also useful when the new pages are not added often. If you add more items to the data source and need to render the new pages, you’d need to run the build again.

If fallback is true, then the behavior of getStaticProps changes:
- The paths returned from getStaticPaths will be rendered to HTML at build time by getStaticProps.
- The paths that have not been generated at build time will not result in a 404 page. Instead, Next.js will serve a “fallback” version of the page on the first request to such a path (see “Fallback pages” below for details).

        // pages/posts/[id].js
        import { useRouter } from 'next/router'

        function Post({ post }) {
          const router = useRouter()

          // If the page is not yet generated, this will be displayed
          // initially until getStaticProps() finishes running
          if (router.isFallback) {
            return <div>Loading...</div>
          }

          // Render post...
        }

        // This function gets called at build time
        export async function getStaticPaths() {
          return {
            // Only `/posts/1` and `/posts/2` are generated at build time
            paths: [{ params: { id: '1' } }, { params: { id: '2' } }],
            // Enable statically generating additional pages
            // For example: `/posts/3`
            fallback: true,
          }
        }

        // This also gets called at build time
        export async function getStaticProps({ params }) {
          // params contains the post `id`.
          // If the route is like /posts/1, then params.id is 1
          const res = await fetch(`https://.../posts/${params.id}`)
          const post = await res.json()

          // Pass post data to the page via props
          return {
            props: { post },
            // Re-generate the post at most once per second
            // if a request comes in
            revalidate: 1,
          }
        }

        export default Post

!!!!!!!
When is fallback: true useful?
- fallback: true is useful if your app has a very large number of static pages that depend on data (think: a very large e-commerce site). You want to pre-render all product pages, but then your builds would take forever.
- Instead, you may statically generate a small subset of pages and use fallback: true for the rest. When someone requests a page that’s not generated yet, the user will see the page with a loading indicator. Shortly after, getStaticProps finishes and the page will be rendered with the requested data. From now on, everyone who requests the same page will get the statically pre-rendered page.
- This ensures that users always have a fast experience while preserving fast builds and the benefits of Static Generation.

fallback: 'blocking'
- The paths returned from getStaticPaths will be rendered to HTML at build time by getStaticProps.
- The paths that have not been generated at build time will not result in a 404 page. Instead, Next.js will SSR on the first request and return the generated HTML.
- When that’s done, the browser receives the HTML for the generated path. From the user’s perspective, it will transition from "the browser is requesting the page" to "the full page is loaded". There is no flash of loading/fallback state.


3.
Maybe your page shows frequently updated data, and the page content changes on every request.
In cases like this, you can do one of the following: Client-side Rendering | Server-Side Rendering
=====================================================================================================================

Server-side Rendering
Also referred to as "SSR" or "Dynamic Rendering".
As you can see, getServerSideProps is similar to getStaticProps, but the difference is that getServerSideProps is run on every request instead of on build time.

        function Page({ data }) {
          // Render data...
        }

        // This gets called on every request
        export async function getServerSideProps() {
          // Fetch data from external API
          const res = await fetch(`https://.../data`)
          const data = await res.json()

          // Pass data to the page via props
          return { props: { data } }
        }

        export default Page

        ----------------------------

The context parameter is an object containing the following keys:
- params: If this page uses a dynamic route, params contains the route parameters. If the page name is [id].js , then params will look like { id: ... }. To learn more, take a look at the Dynamic Routing documentation.
- req: The HTTP IncomingMessage object.
- res: The HTTP response object.
- query: An object representing the query string.
- preview: preview is true if the page is in the preview mode and false otherwise. See the Preview Mode documentation.
- previewData: The preview data set by setPreviewData. See the Preview Mode documentation.
- resolvedUrl: A normalized version of the request URL that strips the _next/data prefix for client transitions and includes original query values.
- locale contains the active locale (if enabled).
- locales contains all supported locales (if enabled).
- defaultLocale contains the configured default locale (if enabled).

getServerSideProps should return an object with:
- props - An optional object with the props that will be received by the page component. It should be a serializable object
- notFound - An optional boolean value to allow the page to return a 404 status and page. Below is an example of how it works:

        export async function getServerSideProps(context) {
          const res = await fetch(`https://...`)
          const data = await res.json()

          if (!data) {
            return {
              notFound: true,
            }
          }

          return {
            props: {}, // will be passed to the page component as props
          }
        }

- redirect - An optional redirect value to allow redirecting to internal and external resources. It should match the shape of { destination: string, permanent: boolean }. In some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use the statusCode property instead of the permanent property, but not both. Below is an example of how it works:

        export async function getServerSideProps(context) {
          const res = await fetch(`https://.../data`)
          const data = await res.json()

          if (!data) {
            return {
              redirect: {
                destination: '/',
                permanent: false,
              },
            }
          }

          return {
            props: {}, // will be passed to the page component as props
          }
        }

        ----------------------------


4. Reading files: Use process.cwd()
==========================================================
Since Next.js compiles your code into a separate directory you can't use __dirname as the path it will return will be different from the pages directory.
Instead you can use process.cwd() which gives you the directory where Next.js is being executed.


        import { promises as fs } from 'fs'
        import path from 'path'

        // posts will be populated at build time by getStaticProps()
        function Blog({ posts }) {
          return (
            <ul>
              {posts.map((post) => (
                <li>
                  <h3>{post.filename}</h3>
                  <p>{post.content}</p>
                </li>
              ))}
            </ul>
          )
        }

        // This function gets called at build time on server-side.
        // It won't be called on client-side, so you can even do
        // direct database queries. See the "Technical details" section.
        export async function getStaticProps() {
          const postsDirectory = path.join(process.cwd(), 'posts')
          const filenames = await fs.readdir(postsDirectory)

          const posts = filenames.map(async (filename) => {
            const filePath = path.join(postsDirectory, filename)
            const fileContents = await fs.readFile(filePath, 'utf8')

            // Generally you would parse/transform the contents
            // For example you can transform markdown to HTML here

            return {
              filename,
              content: fileContents,
            }
          })
          // By returning { props: { posts } }, the Blog component
          // will receive `posts` as a prop at build time
          return {
            props: {
              posts: await Promise.all(posts),
            },
          }
        }

        export default Blog

        ----------------------------

5. SWR
The team behind Next.js has created a React hook for data fetching called SWR. We highly recommend it if you’re fetching data on the client side. It handles caching, revalidation, focus tracking, refetching on interval, and more. And you can use it like so:

        import useSWR from 'swr'

        function Profile() {
          const { data, error } = useSWR('/api/user', fetch)

          if (error) return <div>failed to load</div>
          if (!data) return <div>loading...</div>
          return <div>hello {data.name}!</div>
        }

























